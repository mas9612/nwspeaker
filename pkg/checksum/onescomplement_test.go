package checksum

import (
	"bytes"
	"testing"
)

var onesComplementTests = []struct {
	in  byte
	out byte
}{
	{0x7f, 0x80},
	{0x7e, 0x81},
	{0x02, 0xfd},
	{0x01, 0xfe},
	{0x00, 0xff},
	{0xff, 0x00},
	{0xfe, 0x01},
	{0xfd, 0x02},
	{0x81, 0x7e},
	{0x80, 0x7f},
}

func TestOnesComplement(t *testing.T) {
	var complement byte
	for _, tt := range onesComplementTests {
		complement = onesComplement(tt.in)
		if complement != tt.out {
			t.Errorf("onesComplement(%x) = %x, but got %x\n", tt.in, tt.out, complement)
		}
	}
}

var sumOfOnesComplementTests = []struct {
	in  []byte
	out []byte
}{
	{
		[]byte{0x45, 0x00, 0x00, 0x73, 0x00, 0x00, 0x40, 0x00, 0x40, 0x11, 0x00, 0x00, 0xc0, 0xa8, 0x00, 0x01, 0xc0, 0xa8, 0x00, 0xc7},
		[]byte{0xb8, 0x61},
	},
	{
		[]byte{0x45, 0x00, 0x00, 0x3c, 0x1c, 0x46, 0x40, 0x00, 0x40, 0x06, 0x00, 0x00, 0xac, 0x10, 0x0a, 0x63, 0xac, 0x10, 0x0a, 0x0c},
		[]byte{0xb1, 0xe6},
	},
}

func TestSumOfOnesComplement16(t *testing.T) {
	var checksum []byte
	for _, tt := range sumOfOnesComplementTests {
		checksum = SumOfOnesComplement16(tt.in)
		if !bytes.Equal(checksum, tt.out) {
			t.Errorf("SumOfOnesComplement16(%x) = %x, but got %x\n", tt.in, tt.out, checksum)
		}
	}
}
